import Head from "next/head";
import Image from "next/image";
import { Inter, Lateef } from "next/font/google";
import styles from "@/styles/Home.module.css";
import Layout from "@/components/Layout";
import profilePic from "../../public/images/profile/developer-pic-1.png";
import AnimatedText from "@/components/AnimatedText";
const inter = Inter({ subsets: ["latin"] });
import Link from "next/link";
import { LinkArrow } from "@/components/Icons";
import HireMe from "@/components/HireMe";
import lightBulb from "../../public/images/svgs/miscellaneous_icons_1.svg";
import TranstionEffect from "@/components/TranstionEffect";
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";
import { useTheme } from "next-themes";

import { darcula, light } from "react-syntax-highlighter/dist/cjs/styles/prism";
import { useState, useEffect } from "react";
import { motion } from "framer-motion";
export default function Home() {
  const [shape, setShape] = useState("circle");
  const [text, setText] = useState("");
  const [index, setIndex] = useState(0);
  const typingSpeed = 100;
  const textToType = "THINK OUT OF THE SHAPES";

  const variants = {
    circle: { borderRadius: "50%", rotate: 0, scale: 1 },
    square: { borderRadius: "0%", rotate: 90, scale: 1.2 },
    triangle: {
      borderRadius: "0%",
      clipPath: "polygon(50% 0%, 0% 100%, 100% 100%)",
      rotate: 180,
      scale: 0.8,
    },
  };

  useEffect(() => {
    const intervalId = setInterval(() => {
      setIndex((prevIndex) => {
        const nextIndex = prevIndex + 1;
        if (nextIndex > textToType.length) {
          return 1;
        } else {
          return nextIndex;
        }
      });
    }, typingSpeed);

    return () => clearInterval(intervalId);
  }, []);

  useEffect(() => {
    setText(textToType.substring(0, index));
  }, [index]);

  useEffect(() => {
    const intervalId = setInterval(() => {
      if (shape === "circle") {
        setShape("square");
      } else if (shape === "square") {
        setShape("triangle");
      } else {
        setShape("circle");
      }
    }, 3000);
    return () => clearInterval(intervalId);
  }, [shape]);
  const { theme } = useTheme();
  const isDarkMode = theme === "dark";
  const style = isDarkMode ? darcula : light;
  return (
    <>
      <Head>
        <title>Hossam Fahmy</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <TranstionEffect />
      <main className="flex items-center text-dark w-full min-h-screen dark:text-light relative overflow-hidden">
        <motion.div
          className="bg-dark dark:bg-white absolute top-0 right-0 w-1/2 h-full transform rotate-180 rounded-full translate-x-[-90px] sm:hidden xs:hidden "
          initial={{ scale: 0 }}
          animate={{ scale: 1, ...variants[shape] }}
          exit={{ scale: 0 }}
          transition={{
            duration: 1.1,
            ease: "easeInOut",
            delay: 0.5,
            stiffness: 100,
            damping: 20,
          }}
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.9 }}
          drag
          dragConstraints={{ left: 0, right: 0, top: 0, bottom: 0 }}
          dragElastic={0.2}
          key={shape}
        />
        {/* <div class="bg-dark absolute top-0 right-0 w-1/2 h-full transform rotate-180 rounded-full translate-x-[-90px]"></div>{" "} */}
        <Layout className="pt-0 md:p-16 sm:pt-4 bg-transparent dark:bg-transparent  ">
          <div className="flex items-center justify-between w-full lg:flex-col">
            <div className="w-1/2 flex flex-col lg:w-full lg:text-center">
              <AnimatedText
                text="Hossam Fahmy"
                className="!text-6xl !text-left xl:!text-5xl lg:!text-center lg:!text-6xl md:!text-5xl sm:!text-3xl"
              />
              <motion.p
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ duration: 0.5 }}
                className="my-4 text-2xl font-medium md:text-sm sm:text-xs"
              >
                {text}
              </motion.p>
              <div className="flex items-center self-start mt-2 lg:self-center z-30">
                <Link
                  href="/hossamfahmy.pdf"
                  target="_blank"
                  className="dark:bg-light dark:text-dark flex items-center bg-dark text-light p-2.5 px-6 rounded-full text-lg font-semibold hover:bg-light hover:text-dark border-2 border-solid border-transparent hover:border-dark  hover:dark:bg-dark hover:dark:text-light hover:dark:border-light md:p-2 md:px-4 md:text-base "
                  download={true}
                >
                  Resume
                  <LinkArrow className={"w-6 ml-1"} />
                </Link>
                <Link
                  href="mailto:hossameldinfahmi@gmail.com"
                  className="ml-5 text-lg font-medium capitalize text-dark underline dark:text-light md:text-base "
                >
                  Contact
                </Link>
              </div>
            </div>
            <div className="w-1/2 md:w-full">
              <SyntaxHighlighter
                language="javascript"
                style={style}
                customStyle={{ fontSize: "20px" }}
                className="shadow-lg rounded-lg  max-w-xl"
              >
                {`class Person{
  constructor(){
    this.name = "Hossam Fahmy";
    this.traits = ["Design","Dev"];
    this.age = new Date().fullYear() - 1998;
    }
  }`}
              </SyntaxHighlighter>
            </div>
          </div>
        </Layout>
        <HireMe />
      </main>
    </>
  );
}
